import oci

# Set up the authentication details
config = oci.config.from_file()
block_storage_client = oci.core.BlockstorageClient(config)

# Define the OCID of the block volume for which you want to create an image
block_volume_id = 'your_block_volume_ocid'

# Create a block volume backup (image) from the source volume
create_volume_backup_details = oci.core.models.CreateVolumeBackupDetails(
    volume_id=block_volume_id,
    display_name='MyVolumeBackup',  # Change this to your preferred backup name
    compartment_id=config['tenancy']
)

backup_response = block_storage_client.create_volume_backup(create_volume_backup_details)
backup_id = backup_response.data.id

# Wait for the backup to become available (optional but recommended)
backup = block_storage_client.get_volume_backup(backup_id).data
if backup.lifecycle_state != oci.core.models.VolumeBackup.LIFECYCLE_STATE_AVAILABLE:
    block_storage_client.get_volume_backup(backup_id, wait_for_states=[oci.core.models.VolumeBackup.LIFECYCLE_STATE_AVAILABLE])

print(f"Created backup with OCID: {backup_id}")



# ... (use the configuration and setup from the previous script)

# Create a block volume from the backup (image)
create_volume_details = oci.core.models.CreateVolumeDetails(
    compartment_id=config['tenancy'],
    display_name='NewVolumeFromBackup',  # Change this to your preferred volume name
    source_volume_backup_id=backup_id,
    availability_domain='your_availability_domain',  # Replace with the desired availability domain
    size_in_gbs=50  # Set the size of the new volume as needed
)

volume_response = block_storage_client.create_volume(create_volume_details)
new_volume_id = volume_response.data.id

# Wait for the new volume to become available (optional but recommended)
volume = block_storage_client.get_volume(new_volume_id).data
if volume.lifecycle_state != oci.core.models.Volume.LIFECYCLE_STATE_AVAILABLE:
    block_storage_client.get_volume(new_volume_id, wait_for_states=[oci.core.models.Volume.LIFECYCLE_STATE_AVAILABLE])

print(f"Created new volume from backup with OCID: {new_volume_id}")



# ... (use the configuration and setup from the previous scripts)

compute_client = oci.core.ComputeClient(config)

# Define the OCID of the target compute instance where you want to attach the volume
target_instance_id = 'your_target_instance_ocid'

# Attach the newly created volume to the target instance
attach_volume_details = oci.core.models.AttachVolumeDetails(
    instance_id=target_instance_id,
    volume_id=new_volume_id
)

block_storage_client.attach_volume(attach_volume_details)

# Wait for the volume to be attached (optional but recommended)
block_storage_client.get_volume(new_volume_id, wait_for_states=[oci.core.models.Volume.LIFECYCLE_STATE_ATTACHED])

print(f"Attached new volume to instance with OCID: {target_instance_id}")
